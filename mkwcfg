#!/bin/bash

##
# mkwcfg -- creates wireless network profile
#
# usage -- mkwcfg ESSID [TYPE] [KEY]
#
# written -- 1 January, 2011 by Greg Dwulet
#
# revised -- 6 July, 2011 by Egan McComb
##

err_nargs=3
err_vargs=5

iwlist="sudo iwlist wlan0 scan | piwlist.py -n"
netdir="/etc/network.d"

usage()
{
	echo "Usage: $(basename $0) ESSID [wep|wpa] [KEY]" >&2
	echo -e "\t-Will detect network type and prompt" >&2
	echo -e "\t for a key if given only one argument" >&2
}

chkargs()
{
	if [ -z "$1" ]
	then
		echo "Error: Too few arguments" >&2
		usage
		exit $err_nargs
	elif [ $# -gt 3 ]
	then
		echo "Error: Too many arguments" >&2
		usage
		exit $err_nargs
	fi
}

doargs()
{
	if [ $# -eq 1 ]
	then
		if $(grep -q "$1" <<< "$iwscan")
		then
			essid="$1"
			file="$netdir/$essid-wireless"
			if $(! grep -q "$essid|Open" <<< "$iwscan")
			then
				iwscan=$(grep -m 1 "$essid" <<< "$iwscan")
				type=$(cut -d "|" -f 5 <<< "$iwscan" | cut -d " " -f 1 | tr "[A-Z]" "[a-z]")
				echo -n "Please enter $type key for '$essid' network: "
				read KEY

			fi
		else
			echo "Error: Unknown wireless network '$1'" >&2
			usage
			exit $err_vargs
		fi
	elif [ $# -eq 2 ]
	then
		echo "Error: Incorrect arguments" >&2
		usage
		exit $err_vargs
	else
		if [ $2 != "wep" ] && [ $2 != "wpa" ]
		then
			echo "Error: Invalid network type '$2'" >&2
			usage
			exit $err_vargs
		else
			type=$2
			key="$3"
		fi
		if $(grep -q "$1" <<< "$iwscan")
		then
			essid="$1"
			file="$netdir/$essid-wireless"
		else
			echo "Error: Unknown wireless network '$1'" >&2
			usage
			exit $err_nargs
		fi
	fi
}

makeprofile()
{
	if [ ! -e "$file" ]
	then
		cp $netdir/examples/wireless-$type "$file"
		editprofile "$essid" $type "$key"
	else
		echo "Warning: File exits, doing nothing" >&2
	fi
}

editprofile()
{
	sed -i "s/MyNetwork/$essid/" "$file"
	if [ $type = "wep" ]
	then
		sed -i "s/123456789/$key/" "$file"
	elif [ $type = "wpa" ]
	then
		sed -i "s/WirelessKey/$key/" "$file"
	fi
	echo "DHCP_TIMEOUT='3000'" >> "$file"
}

##----MAIN----##
if [ $EUID != "0" ]
then
	echo "Error: Must be root"
exit 1
fi

chkargs "$@"
iwscan=$(eval $iwlist)
doargs "$@"
makeprofile

exit 0
